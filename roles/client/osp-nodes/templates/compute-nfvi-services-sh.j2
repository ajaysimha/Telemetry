HOSTNAME="${COLLECTD_HOSTNAME:-`hostname -f`}"
#INTERVAL="${COLLECTD_INTERVAL:-10}"
INTERVAL={{ collectd_exec_sleep_interval }}

send_alert() {
alerts='[
  {
    "labels": {
       "alertname": "NFVi_Service_Alert",
       "instance": "'${HOSTNAME}'",
       "service": "'$1'",
       "severity": "Critical"

     },
     "annotations": {
        "info": "The instance '${HOSTNAME}' is down",
        "summary": "instance '${HOSTNAME}' is down",
        "description": "'$2' service is down on '${HOSTNAME}'"
      }
  }
]'

{% for server in groups["alert_managers"] %}
URL{{ loop.index }}="http://{{ server }}:{{ alert_manager_port }}"
{% endfor %}
curl -XPOST -d"$alerts" $URL1/api/v1/alerts >/dev/null 2>&1
curl -XPOST -d"$alerts" $URL2/api/v1/alerts >/dev/null 2>&1

}
# For all the following commands HOME should be set to the directory that has -my.cnf file with password information.

# Flexible parameter to grab global variables- On the frontend side, use keys like mysql.status[Com_insert].
# Key syntax is mysql-status[variable].
while sleep "$INTERVAL" ; do
  #Read more https://linux-die.net/man/5/collectd-exec
  #An Identifier is of the form " host / plugin - instance / type - instance "
  #Refer for all typesdb to use like links-cinder  https://github-com/collectd/collectd/blob/master/src/types.db

  val=$(sudo systemctl is-active openstack-ceilometer-compute >/dev/null 2>&1 && echo 1 || echo 0)
  echo "PUTVAL \"$HOSTNAME/nfvi-services/service-openstack-ceilometer-compute\"  interval=$INTERVAL N:$val"
  [ $val -eq 0 ] && send_alert 'openstack-ceilometer-compute' 'OpenStack Ceilometer Compute'

  val=$(sudo systemctl is-active openstack-nova-compute >/dev/null 2>&1 && echo 1 || echo 0)
  echo "PUTVAL \"$HOSTNAME/nfvi-services/service-openstack-nova-compute\" interval=$INTERVAL N:$val"
  [ $val -eq 0 ] && send_alert 'openstack-nova-compute' 'OpenStack Nova Compute'

  val=$(sudo systemctl is-active ntpd >/dev/null 2>&1 && echo 1 || echo 0)
  echo "PUTVAL \"$HOSTNAME/nfvi-services/service-ntpd-service\" interval=$INTERVAL N:$val"
  [ $val -eq 0 ] && send_alert 'ntpd' 'NTP Daemon'

  val=$(sudo systemctl is-active sshd >/dev/null 2>&1 && echo 1 || echo 0)
  echo "PUTVAL \"$HOSTNAME/nfvi-services/service-sshd-service\" interval=$INTERVAL N:$val"
  [ $val -eq 0 ] && send_alert 'sshd' 'SSH Daemon'

  val=$(sudo systemctl is-active libvirtd >/dev/null 2>&1 && echo 1 || echo 0)
  echo "PUTVAL \"$HOSTNAME/nfvi-services/service-libvirtd-service\" interval=$INTERVAL N:$val"
  [ $val -eq 0 ] && send_alert 'libvirtd' 'Virtualization Daemon'

  val=$(ps aux | awk '{ print $8 " " $2 }' | grep -w Z | wc -l)
  echo "PUTVAL \"$HOSTNAME/nfvi-services/service-zombieprocess-process\" interval=$INTERVAL N:$val"
  [ $val -gt 0 ] && send_alert 'zombie-processes' $val' Zombie process(es) found'

  #val=$(/usr/local/sbin/netif_discovery.sh)
  #val=$(if [$val -z ]; then echo 0; else echo $val; fi)
  #echo "PUTVAL \"$HOSTNAME/nfvi-services/service-net-phys-if-discovery\" interval=$INTERVAL N:$val"

  #val=$(if [ $(cat /sys/class/net/$1/operstate)= "up" ]; then cat /sys/class/net/$1/carrier; else echo "0"; fi;)
  #val=$(if [$val -z ]; then echo 0; else echo $val; fi)
  #echo "PUTVAL \"$HOSTNAME/nfvi-services/service-net-if-carrier-status \" interval=$INTERVAL N:$val"

  #val=$(/usr/local/sbin/discover_disk.sh)
  #val=$(if [$val -z ]; then echo 0; else echo $val; fi)
  #echo "PUTVAL \"$HOSTNAME/nfvi-services/service-disk-discovery\" interval=$INTERVAL N:$val"

  #val= $(/usr/local/sbin/smart-temp.sh /dev/$1 Temperature_Celsius)
  #val=$(if [$val -z ]; then echo 0; else echo $val; fi)
  #echo "PUTVAL \"$HOSTNAME/nfvi-services/service-smart-temp\" interval=$INTERVAL N:$val"

  #val=$(/usr/local/sbin/smart-health.sh /dev/$1)
  #val=$(if [$val -z ]; then echo 0; else echo $val; fi)
  #echo "PUTVAL \"$HOSTNAME/nfvi-services/service-smart-health\" interval=$INTERVAL N:$val"
done
